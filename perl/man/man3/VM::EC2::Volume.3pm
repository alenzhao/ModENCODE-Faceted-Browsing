.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VM::EC2::Volume 3pm"
.TH VM::EC2::Volume 3pm "2011-09-26" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VM::EC2::Volume \- Object describing an Amazon EBS volume
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use VM::EC2;
\&
\&  $ec2       = VM::EC2\->new(...);
\&  @vol = $ec2\->describe_volumes;
\&  for my $vol (@vols) {
\&    $id    = $vol\->volumeId;
\&    $size  = $vol\->size;
\&    $snap  = $vol\->snapshotId;
\&    $zone  = $vol\->availabilityZone;
\&    $status = $vol\->status;
\&    $ctime = $vol\->createTime;
\&    @attachments = $vol\->attachments;
\&    $attachment  = $vol\->attachment;
\&    $origin      = $vol\->from_snapshot;
\&    @snapshots   = $vol\->to_snapshots;
\&  }
\&  $vols[0]\->attach(\*(Aqi\-12345\*(Aq,\*(Aq/dev/sdg1\*(Aq);
\&  $vols[0]\->deleteOnTermination(\*(Aqtrue\*(Aq);
\&  $vols[0]\->detach;
\&  $vols[0]\->create_snapshot(\*(Aqautomatic snapshot\*(Aq)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is used to describe an Amazon \s-1EBS\s0 volume. It is returned
by \s-1VM::EC2\-\s0>\fIdescribe_volumes()\fR.
.SH "METHODS"
.IX Header "METHODS"
The following object methods are supported:
.PP
.Vb 9
\& volumeId         \-\- ID of this volume.
\& size             \-\- Size of this volume (in GB).
\& snapshotId       \-\- ID of snapshot this 
\& availabilityZone \-\- Availability zone in which this volume resides.
\& status           \-\- Volume state, one of "creating", "available",
\&                     "in\-use", "deleting", "deleted", "error"
\& createTime       \-\- Timestamp for when volume was created.
\& tags             \-\- Hashref containing tags associated with this group.
\&                     See L<VM::EC2::Generic>.
.Ve
.PP
In addition, this class provides several convenience functions:
.ie n .SS "$attachment  = $vol\->attachment"
.el .SS "\f(CW$attachment\fP  = \f(CW$vol\fP\->attachment"
.IX Subsection "$attachment  = $vol->attachment"
.ie n .SS "@attachments = $vol\->attachments"
.el .SS "\f(CW@attachments\fP = \f(CW$vol\fP\->attachments"
.IX Subsection "@attachments = $vol->attachments"
The \fIattachment()\fR method returns a
VM::EC2::BlockDevice::Attachment object describing the
attachment of this volume to an instance. If the volume is unused,
then this returns undef.
.PP
The \fIattachments()\fR method is similar, except that it returns a list of
the attachments.  Currently an \s-1EBS\s0 volume can only be attached to one
instance at a time, but the Amazon call syntax supports multiple
attachments and this method is provided for future compatibility.
.ie n .SS "$attachment = $vol\->attach($instance,$device)"
.el .SS "\f(CW$attachment\fP = \f(CW$vol\fP\->attach($instance,$device)"
.IX Subsection "$attachment = $vol->attach($instance,$device)"
.ie n .SS "$attachment = $vol\->attach(\-instance_id=>$instance,\-device=>$device)"
.el .SS "\f(CW$attachment\fP = \f(CW$vol\fP\->attach(\-instance_id=>$instance,\-device=>$device)"
.IX Subsection "$attachment = $vol->attach(-instance_id=>$instance,-device=>$device)"
Attach this volume to an instance using virtual device \f(CW$device\fR. Both
arguments are required. The result is a
VM::EC2::BlockDevice::Attachment object which you can monitor by
calling \fIcurrent_status()\fR:
.PP
.Vb 5
\&    my $a = $volume\->attach(\*(Aqi\-12345\*(Aq,\*(Aq/dev/sdg\*(Aq);
\&    while ($a\->current_status ne \*(Aqattached\*(Aq) {
\&       sleep 2;
\&    }
\&    print "volume is ready to go\en";
.Ve
.ie n .SS "$attachment = $volume\->\fIdetach()\fP"
.el .SS "\f(CW$attachment\fP = \f(CW$volume\fP\->\fIdetach()\fP"
.IX Subsection "$attachment = $volume->detach()"
.ie n .SS "$attachment = $volume\->detach(\-instance_id=>$instance_id, \-device=>$device, \-force=>$force);"
.el .SS "\f(CW$attachment\fP = \f(CW$volume\fP\->detach(\-instance_id=>$instance_id, \-device=>$device, \-force=>$force);"
.IX Subsection "$attachment = $volume->detach(-instance_id=>$instance_id, -device=>$device, -force=>$force);"
Detaches this volume. With no arguments, will detach the volume from
whatever instance it is currently attached to. Provide \-instance_id
and/or \-device as a check that you are detaching the volume from the
expected instance and device.
.PP
Optional arguments:
.PP
.Vb 4
\& \-instance_id    \-\- ID of the instance to detach from.
\& \-device         \-\- How the device is exposed to the instance.
\& \-force          \-\- Force detachment, even if previous attempts were
\&                    unsuccessful.
.Ve
.PP
The result is a VM::EC2::BlockDevice::Attachment object which
you can monitor by calling \fIcurrent_status()\fR:
.PP
.Vb 5
\&    my $a = $volume\->detach;
\&    while ($a\->current_status ne \*(Aqdetached\*(Aq) {
\&       sleep 2;
\&    }
\&    print "volume is ready to go\en";
.Ve
.ie n .SS "$boolean = $vol\->deleteOnTermination([$boolean])"
.el .SS "\f(CW$boolean\fP = \f(CW$vol\fP\->deleteOnTermination([$boolean])"
.IX Subsection "$boolean = $vol->deleteOnTermination([$boolean])"
Get or set the deleteOnTermination flag for attached volumes. If the volume 
is unattached, then this causes a fatal error. Called with no arguments, this
method returns the current state of the deleteOnTermination flag for the
volume's attachment. Called with a true/false argument, the method sets the
flag by calling \fImodify_instance_attributes()\fR on the corresponding instance
and returns true if successful.
.ie n .SS "$snap = $vol\->from_snapshot"
.el .SS "\f(CW$snap\fP = \f(CW$vol\fP\->from_snapshot"
.IX Subsection "$snap = $vol->from_snapshot"
Returns the VM::EC2::Snapshot object that this volume was
originally derived from. It will return undef if the resource no
longer exists, or if the volume was created from scratch.
.ie n .SS "@snap = $vol\->to_snapshots"
.el .SS "\f(CW@snap\fP = \f(CW$vol\fP\->to_snapshots"
.IX Subsection "@snap = $vol->to_snapshots"
If this volume has been used to create one or more snapshots, this
method will return them as a list of VM::EC2::Snapshot objects.
.ie n .SS "$snapshot = $vol\->create_snapshot('Description')"
.el .SS "\f(CW$snapshot\fP = \f(CW$vol\fP\->create_snapshot('Description')"
.IX Subsection "$snapshot = $vol->create_snapshot('Description')"
Create a snapshot of the volume and return a VM::EC2::Snapshot
object. To ensure a consistent snapshot, you should unmount the volume
before snapshotting it. The optional argument allows you to add a description to the snapshot.
.PP
Here is an example:
.PP
.Vb 5
\&  $s = $volume\->create_snapshot("Backed up at ".localtime);
\&  while ($s\->current_status eq \*(Aqpending\*(Aq) {
\&     print "Progress: ",$s\->progress,"% done\en";
\&  }
\&  print "Snapshot status: ",$s\->current_status,"\en";
.Ve
.ie n .SS "$status = $vol\->current_status"
.el .SS "\f(CW$status\fP = \f(CW$vol\fP\->current_status"
.IX Subsection "$status = $vol->current_status"
This returns the up-to-date status of the volume. It works by calling
\&\fIrefresh()\fR and then returning \fIstatus()\fR.
.SH "STRING OVERLOADING"
.IX Header "STRING OVERLOADING"
When used in a string context, this object will interpolate the
volumeId.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1VM::EC2\s0
VM::EC2::Generic
VM::EC2::Snapshot
VM::EC2::BlockDevice
VM::EC2::BlockDevice::Attachment
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lincoln.stein@gmail.com>.
.PP
Copyright (c) 2011 Ontario Institute for Cancer Research
.PP
This package and its accompanying libraries is free software; you can
redistribute it and/or modify it under the terms of the \s-1GPL\s0 (either
version 1, or at your option, any later version) or the Artistic
License 2.0.  Refer to \s-1LICENSE\s0 for the full license text. In addition,
please see \s-1DISCLAIMER\s0.txt for disclaimers of warranty.
