.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VM::EC2::ReservedInstance 3pm"
.TH VM::EC2::ReservedInstance 3pm "2011-09-26" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VM::EC2::ReservedInstance \- Object describing an Amazon EC2 reserved instance
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use VM::EC2;
\&
\&  $ec2       = VM::EC2\->new(...);
\&  @offerings = $ec2\->describe_reserved_instances();
\&  for my $o (@offerings) {
\&    print $o\->reservedInstancesId,"\en";
\&    print $o\->instanceType,"\en";
\&    print $o\->availabilityZone,"\en";
\&    print $o\->start,"\en";
\&    print $o\->duration,"\en";
\&    print $o\->fixedPrice,"\en";
\&    print $o\->usagePrice,"\en";
\&    print $o\->instanceCount,"\en";
\&    print $o\->productDescription,"\en";
\&    print $o\->state,"\en";
\&    print $o\->instanceTenancy,"\en";
\&    print $o\->currencyCode,"\en";
\&    $tags = $o\->tags;
\&  }
\&=head1 DESCRIPTION
.Ve
.PP
This object represents an Amazon \s-1EC2\s0 reserved instance reservation
that you have purchased, as returned by
\&\s-1VM::EC2\-\s0>\fIdescribe_reserved_instances()\fR.
.SH "METHODS"
.IX Header "METHODS"
These object methods are supported:
.PP
.Vb 1
\& reservedInstancesId \-\- ID of this reserved instance contract
\& 
\& instanceType        \-\- The instance type on which these reserved
\&                         instance can be used.
\&
\& availabilityZone    \-\- The availability zone in which these reserved
\&                         instances can be used.
\&
\& start               \-\- The date and time that this contract was established.
\&
\& duration            \-\- The duration of this contract, in seconds.
\&
\& fixedPrice          \-\- The purchase price of the reserved instance for the indicated
\&                         version.
\&
\& usagePrice          \-\- The usage price of the reserved instance, per hour.
\&
\& instanceCount       \-\- The number of instances that were purchased under this contract.
\&
\& productDescription  \-\- The reserved instance description. One of  "Linux/UNIX",
\&                         "Linux/UNIX (Amazon VPC)", "Windows", and "Windows (Amazon VPC)"
\&
\& state               \-\- The state of the reserved instance purchase. One of "payment\-pending",
\&                         "active", "payment\-failed", and "retired".
\&
\& tagSet              \-\- Tags for this reserved instance set. More conveniently accessed via
\&                         the tags(), add_tags() and delete_tags() methods.
\&
\& instanceTenancy     \-\- The tenancy of the reserved instance (VPC only).
\&
\& currencyCode        \-\- The currency of the reserved instance offering prices.
.Ve
.PP
This object supports the various tag manipulation methods described in
VM::EC2::Generic. In addition it supports the following methods:
.ie n .SS "$status = $reserved_instance\->current_status"
.el .SS "\f(CW$status\fP = \f(CW$reserved_instance\fP\->current_status"
.IX Subsection "$status = $reserved_instance->current_status"
Refreshes the object and returns its state, one of \*(L"payment-pending\*(R",
\&\*(L"active\*(R", \*(L"payment-failed\*(R", and \*(L"retired\*(R". You can use this to monitor
the progress of a purchase.
.ie n .SS "$reserved_instance\->refresh"
.el .SS "\f(CW$reserved_instance\fP\->refresh"
.IX Subsection "$reserved_instance->refresh"
Calls \s-1VM::EC2\-\s0>\fIdescribe_reserved_instances()\fR to refresh the object
against current information in Amazon.
.SH "STRING OVERLOADING"
.IX Header "STRING OVERLOADING"
When used in a string context, this object will interpolate the
reservedInstancesId.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1VM::EC2\s0
VM::EC2::Generic
VM::EC2::ReservedInstances::Offering
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lincoln.stein@gmail.com>.
.PP
Copyright (c) 2011 Ontario Institute for Cancer Research
.PP
This package and its accompanying libraries is free software; you can
redistribute it and/or modify it under the terms of the \s-1GPL\s0 (either
version 1, or at your option, any later version) or the Artistic
License 2.0.  Refer to \s-1LICENSE\s0 for the full license text. In addition,
please see \s-1DISCLAIMER\s0.txt for disclaimers of warranty.
