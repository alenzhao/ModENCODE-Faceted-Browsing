.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VM::EC2::SecurityGroup 3pm"
.TH VM::EC2::SecurityGroup 3pm "2011-09-26" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VM::EC2::SecurityGroup \- Object describing an Amazon EC2 security group
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use VM::EC2;
\&
\&  $ec2       = VM::EC2\->new(...);
\&  @sg = $ec2\->describe_security_groups;
\&  for my $sg (@sg) {
\&      $name = $sg\->groupName;
\&      $id   = $sg\->groupId;
\&      $desc = $sg\->groupDescription;
\&      $tags = $sg\->tags;
\&      @inbound_permissions  = $sg\->ipPermissions;
\&      @outbound_permissions = $sg\->ipPermissionEgress;
\&      for $i (@inbound_permissions) {
\&         $protocol = $i\->ipProtocol;
\&         $fromPort = $i\->fromPort;
\&         $toPort   = $i\->toPort;
\&         @ranges   = $i\->ipRanges;
\&      }
\&  }
\&
\& $sg = $sg[0];
\&
\& # Add a new security rule
\& $sg\->authorize_incoming(\-protocol  => \*(Aqtcp\*(Aq,
\&                         \-port      => 80,
\&                         \-source_ip => [\*(Aq192.168.2.0/24\*(Aq,\*(Aq192.168.2.1/24\*(Aq});
\&
\& # write it to AWS.
\& $sg\->update();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is used to describe an Amazon \s-1EC2\s0 security group. It is
returned by \s-1VM::EC2\-\s0>\fIdescribe_security_groups()\fR. You may also obtain
this object by calling an Instance object's \fIgroups()\fR method, and then
invoking one of the group's \fIpermissions()\fR method. See
VM::EC2::Group.
.SH "METHODS"
.IX Header "METHODS"
The following object methods are supported:
.PP
.Vb 10
\& ownerId          \-\- Owner of this security group
\& groupId          \-\- ID of this security group
\& groupName        \-\- Name of this security group
\& groupDescription \-\- Description of this group
\& vpcId            \-\- Virtual Private Cloud ID, if applicable
\& ipPermissions    \-\- A list of rules that govern incoming connections
\&                     to instances running under this security group.
\&                     Each rule is a
\&                     L<VM::EC2::SecurityGroup::IpPermission> object.
\& ipPermissionsEgress \-\- A list of rules that govern outgoing connections
\&                     from instances running under this security group.
\&                     Each rule is a
\&                     L<VM::EC2::SecurityGroup::IpPermission object>.
\&                     This field is only valid for VPC groups.
\& tags             \-\- Hashref containing tags associated with this group.
\&                     See L<VM::EC2::Generic>.
.Ve
.PP
For convenience, the following aliases are provided for commonly used methods:
.PP
.Vb 3
\& inbound_permissions  \-\- same as ipPermissions()
\& outbound_permissions \-\- same as ipPermissionsEgress()
\& name                 \-\- same as groupName()
.Ve
.PP
See VM::EC2::SecurityGroup::IpPermission for details on accessing
port numbers, \s-1IP\s0 ranges and other fields associated with incoming and
outgoing firewall rules.
.SH "MODIFYING FIREWALL RULES"
.IX Header "MODIFYING FIREWALL RULES"
To add or revoke firewall rules, call the authorize_incoming,
authorize_outgoing, revoke_incoming or \fIrevoke_outgoing()\fR methods
one or more times. Each of these methods either adds or removes a
single firewall rule. After adding or revoking the desired rules, call
\&\fIupdate()\fR to write the modified group back to Amazon. The object will
change to reflect the new permissions.
.ie n .SS "$permission = $group\->authorize_incoming(%args)"
.el .SS "\f(CW$permission\fP = \f(CW$group\fP\->authorize_incoming(%args)"
.IX Subsection "$permission = $group->authorize_incoming(%args)"
Add a rule for incoming firewall traffic. Arguments are as follows:
.PP
.Vb 3
\& \-protocol        The protocol, either a string (tcp,udp,icmp) or
\&                   the corresponding protocol number (6, 17, 1).
\&                   Use \-1 to indicate all protocols. (required)
\&
\& \-port, \-ports    The port or port range. When referring to a single
\&                   port, you may use either the port number or the
\&                   service name (e.g. "ssh"). For this to work the
\&                   service name must be located in /etc/services.
\&                   When specifying a port range, use "start..end" as
\&                   in "8000..9000". Note that this is a string that
\&                   contains two dots, and not two numbers separated
\&                   by the perl range operator. For the icmp protocol,
\&                   this argument corresponds to the ICMP type number.
\&                   (required).
\&
\& \-group, \-groups   Security groups to authorize. Instances that belong
\&                    to the named security groups will be allowed
\&                    access. You may specify either a single group or
\&                    a list of groups as an arrayref. The following
\&                    syntaxes are recognized:
\&
\&                    "sg\-12345"       authorize group with this groupId
\&                    "12345/my group" authorize group named "my group" 
\&                                      owned by user 12345
\&                     "my group"      authorize group named "my group"
\&                                      owned by yourself
\&
\& \-source, \-source_ip Authorize incoming traffic from an IP address, IP
\&                      address range, or set of such ranges. IP
\&                      addresses use the CIDR notation of a.b.c.d/mask,
\&                      as described in 
\&                      http://en.wikipedia.org/wiki/Classless_Inter\-Domain_Routing.
\&                      Pass an arrayref to simultaneously authorize
\&                      multiple CIDR ranges.
.Ve
.PP
The result of this call is a VM::EC2::SecurityGroup::IpPermission
object corresponding to the rule you defined. Note that the rule is
not written to Amazon until you call \fIupdate()\fR.
.PP
Here are some examples:
.PP
.Vb 3
\& $sg\->authorize_incoming(\-protocol  => \*(Aqtcp\*(Aq,
\&                         \-port      => 80,
\&                         \-source_ip => [\*(Aq192.168.2.0/24\*(Aq,\*(Aq192.168.2.1/24\*(Aq});
\&
\& # TCP on ports 22 and 23 from anyone
\& $sg\->authorize_incoming(\-protocol  => \*(Aqtcp\*(Aq,
\&                         \-port      => \*(Aq22..23\*(Aq,
\&                         \-source_ip => \*(Aq0.0.0.0/0\*(Aq);
\&
\& # ICMP on echo (ping) port from anyone
\& $sg\->authorize_incoming(\-protocol  => \*(Aqicmp\*(Aq,
\&                         \-port      => 0,
\&                         \-source_ip => \*(Aq0.0.0.0/0\*(Aq);
\&
\& # TCP to port 25 (mail) from instances belonging to
\& # the "Mail relay" group belonging to user 12345678.
\& $sg\->authorize_incoming(\-protocol  => \*(Aqtcp\*(Aq,
\&                         \-port      => 25,
\&                         \-group     => \*(Aq12345678/Mail relay\*(Aq);
.Ve
.ie n .SS "$permission = $group\->authorize_outgoing(%args)"
.el .SS "\f(CW$permission\fP = \f(CW$group\fP\->authorize_outgoing(%args)"
.IX Subsection "$permission = $group->authorize_outgoing(%args)"
This is identical to \fIauthorize_incoming()\fR except that the rule applies
to outbound traffic. Only \s-1VPC\s0 security groups can define outgoing
firewall rules.
.ie n .SS "$permission = $group\->revoke_incoming($rule)"
.el .SS "\f(CW$permission\fP = \f(CW$group\fP\->revoke_incoming($rule)"
.IX Subsection "$permission = $group->revoke_incoming($rule)"
.ie n .SS "$permission = $group\->revoke_incoming(%args)"
.el .SS "\f(CW$permission\fP = \f(CW$group\fP\->revoke_incoming(%args)"
.IX Subsection "$permission = $group->revoke_incoming(%args)"
This method revokes an incoming firewall rule. You can call it with a
single argument consisting of a
VM::EC2::SecurityGroup::IpPermission object in order to revoke that
rule. Alternatively, when called with the named arguments listed for
\&\fIauthorize_incoming()\fR, it will attempt to match an existing rule to the
provided arguments and queue it for deletion.
.PP
Here is an example of revoking all rules that allow ssh (port 22)
access:
.PP
.Vb 3
\& @ssh_rules = grep {$_\->fromPort == 22} $group\->ipPermissions;
\& $group\->revoke_incoming($_) foreach @ssh_rules;
\& $group\->update();
.Ve
.ie n .SS "$boolean = $group\->\fIupdate()\fP"
.el .SS "\f(CW$boolean\fP = \f(CW$group\fP\->\fIupdate()\fP"
.IX Subsection "$boolean = $group->update()"
This method will write all queued rule authorizations and revocations
to Amazon, and return a true value if successful. The method will
return false if any of the rule updates failed. You can examine the
\&\s-1VM::EC2\s0 object's \fIerror_str()\fR method to determine what went wrong, and
check the group object's \fIipPermissions()\fR method to see what firewall
rules are currently defined.
.ie n .SS "$boolean = $group\->\fIwrite()\fP"
.el .SS "\f(CW$boolean\fP = \f(CW$group\fP\->\fIwrite()\fP"
.IX Subsection "$boolean = $group->write()"
An alias for \fIupdate()\fR
.ie n .SS "$group\->\fIrefresh()\fP"
.el .SS "\f(CW$group\fP\->\fIrefresh()\fP"
.IX Subsection "$group->refresh()"
This method refreshes the group information from Amazon. It is called
automatically by \fIupdate()\fR.
.SH "STRING OVERLOADING"
.IX Header "STRING OVERLOADING"
When used in a string context, this object will interpolate the
groupId.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1VM::EC2\s0
VM::EC2::Generic
VM::EC2::Instance
VM::EC2::Group
VM::EC2::SecurityGroup::IpPermission
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lincoln.stein@gmail.com>.
.PP
Copyright (c) 2011 Ontario Institute for Cancer Research
.PP
This package and its accompanying libraries is free software; you can
redistribute it and/or modify it under the terms of the \s-1GPL\s0 (either
version 1, or at your option, any later version) or the Artistic
License 2.0.  Refer to \s-1LICENSE\s0 for the full license text. In addition,
please see \s-1DISCLAIMER\s0.txt for disclaimers of warranty.
