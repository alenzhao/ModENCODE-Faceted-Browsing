.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VM::EC2::SecurityGroup::IpPermission 3pm"
.TH VM::EC2::SecurityGroup::IpPermission 3pm "2011-09-26" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VM::EC2::SecurityGroup::IpPermission \- Object describing a firewall rule in an EC2 security group.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  $ec2      = VM::EC2\->new(...);
\&  $sg       = $ec2\->describe_security_groups(\-name=>\*(AqMy Group\*(Aq);
\&
\&  my @rules = $sg\->ipPermissions;
\&  for my $rule (@rules) {   # each rule is a VM::EC2::SecurityGroup::IpPermission
\&         $protocol = $rule\->ipProtocol;
\&         $fromPort = $rule\->fromPort;
\&         $toPort   = $rule\->toPort;
\&         @ranges   = $rule\->ipRanges;
\&         @groups   = $rule\->groups;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is used to describe the firewall rules defined within an
Amazon \s-1EC2\s0 security group. It is returned by the
VM::EC2::SecurityGroup object's \fIipPermissions()\fR and
\&\fIipPermissionsEgress()\fR methods (these are also known as
\&\fIinbound_permissions()\fR and \fIoutbound_permissions()\fR).
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$protocol = $rule\->ipProtocol"
.el .SS "\f(CW$protocol\fP = \f(CW$rule\fP\->ipProtocol"
.IX Subsection "$protocol = $rule->ipProtocol"
Return the \s-1IP\s0 protocol for this rule: one of \*(L"tcp\*(R", \*(L"udp\*(R" or \*(L"icmp\*(R".
.ie n .SS "$port = $rule\->fromPort"
.el .SS "\f(CW$port\fP = \f(CW$rule\fP\->fromPort"
.IX Subsection "$port = $rule->fromPort"
Start of the port range defined by this rule, or the \s-1ICMP\s0 type
code. This will be a numeric value, like 80, or \-1 to indicate all
ports/codes.
.ie n .SS "$port = $rule\->toPort"
.el .SS "\f(CW$port\fP = \f(CW$rule\fP\->toPort"
.IX Subsection "$port = $rule->toPort"
End of the port range defined by this rule, or the \s-1ICMP\s0 type
code. This will be a numeric value, like 80, or \-1 to indicate all
ports/codes.
.ie n .SS "@ips = $rule\->ipRanges"
.el .SS "\f(CW@ips\fP = \f(CW$rule\fP\->ipRanges"
.IX Subsection "@ips = $rule->ipRanges"
This method will return a list of the \s-1IP\s0 addresses that are allowed to
originate or receive traffic, provided that the rule defines IP-based
firewall filtering.
.PP
Each address is a \s-1CIDR\s0 (classless internet domain routing) address in
the form a.b.c.d/n, such as 10.23.91.0/24
(http://en.wikipedia.org/wiki/Classless_Inter\-Domain_Routing). The
\&\*(L"any\*(R" address is in the form 0.0.0.0/0.
.ie n .SS "@groups = $rule\->groups"
.el .SS "\f(CW@groups\fP = \f(CW$rule\fP\->groups"
.IX Subsection "@groups = $rule->groups"
This method will return a list of the security groups that are allowed
to originate or receive traffic from instances assigned to this
security group, provided that the rule defines group-based traffic
filtering.
.PP
Each returned object is a VM::EC2::SecurityGroup::GroupPermission,
not a VM::EC2::SecurityGroup. The reason for this is that these
traffic filtering groups can include security groups owned by other
accounts
.PP
The GroupPermission objects define the methods \fIuserId()\fR, \fIgroupId()\fR and
\&\fIgroupName()\fR.
.SH "STRING OVERLOADING"
.IX Header "STRING OVERLOADING"
When used in a string context, this object will interpolate the rule
using the following templates:
.PP
\&\s-1TCP\s0 port 22 open to any host:
.PP
.Vb 1
\& "tcp(22..22) FROM CIDR 0.0.0.0/0"
.Ve
.PP
\&\s-1TCP\s0 ports 23 through 39 open to the two class C networks 192.168.0.*
and 192.168.1.*:
.PP
.Vb 1
\& "tcp(23..29) FROM CIDR 192.168.0.0/24,192.168.1.0/24"
.Ve
.PP
\&\s-1UDP\s0 port 80 from security group \*(L"default\*(R" owned by you and the group
named \*(L"farmville\*(R" owned by user 9999999:
.PP
.Vb 1
\& "udp(80..80) GRPNAME default,9999999/farmville"
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1VM::EC2\s0
VM::EC2::Generic
VM::EC2::Instance
VM::EC2::SecurityGroup
VM::EC2::SecurityGroup::IpPermission
VM::EC2::SecurityGroup::GroupPermission
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lincoln.stein@gmail.com>.
.PP
Copyright (c) 2011 Ontario Institute for Cancer Research
.PP
This package and its accompanying libraries is free software; you can
redistribute it and/or modify it under the terms of the \s-1GPL\s0 (either
version 1, or at your option, any later version) or the Artistic
License 2.0.  Refer to \s-1LICENSE\s0 for the full license text. In addition,
please see \s-1DISCLAIMER\s0.txt for disclaimers of warranty.
